# Generated by Django 5.0.6 on 2024-06-29 00:09

import datetime
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='userprofile_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='userprofile_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('recurrence_type', models.CharField(choices=[('none', 'None'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly'), ('custom', 'Custom')], default='none', max_length=20)),
                ('recurrence_interval', models.PositiveIntegerField(default=1)),
                ('days_of_week', models.JSONField(blank=True, default=list)),
                ('days_of_month', models.JSONField(blank=True, default=list)),
                ('time_of_day', models.TimeField(blank=True, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('priority', models.PositiveIntegerField(choices=[(1, 'Low'), (2, 'Medium'), (3, 'High'), (4, 'Urgent')], default=2)),
                ('num_pomodoros', models.PositiveIntegerField(default=0)),
                ('total_pomodoros', models.PositiveIntegerField(default=0)),
                ('task_duration', models.DurationField(blank=True, null=True)),
                ('task_theme_color', models.CharField(default='#007bff', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='alxfocuszen_engine.userprofile')),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PomodoroSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('number_of_breaks', models.PositiveIntegerField(default=0)),
                ('number_of_pomodoros', models.PositiveIntegerField(default=0)),
                ('pomodoro_length', models.PositiveIntegerField(default=25)),
                ('break_length', models.PositiveIntegerField(default=5)),
                ('break_interval', models.PositiveIntegerField(default=4)),
                ('start_break', models.DateTimeField()),
                ('end_break', models.DateTimeField()),
                ('task_completed', models.BooleanField(default=False)),
                ('task_cancelled', models.BooleanField(default=False)),
                ('task_rescheduled', models.BooleanField(default=False)),
                ('task_duration', models.DurationField(default=datetime.timedelta)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paused', 'Paused'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pomodoro_sessions', to='alxfocuszen_engine.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pomodoro_sessions', to='alxfocuszen_engine.userprofile')),
            ],
            options={
                'verbose_name': 'Pomodoro Session',
                'verbose_name_plural': 'Pomodoro Sessions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['email', 'username'], name='alxfocuszen_email_9de299_idx'),
        ),
        migrations.AddConstraint(
            model_name='userprofile',
            constraint=models.UniqueConstraint(fields=('email',), name='unique_email'),
        ),
        migrations.AddConstraint(
            model_name='userprofile',
            constraint=models.UniqueConstraint(fields=('username',), name='unique_username'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['status'], name='alxfocuszen_status_3c064b_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['priority'], name='alxfocuszen_priorit_003198_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['due_date'], name='alxfocuszen_due_dat_eebaf7_idx'),
        ),
        migrations.AddIndex(
            model_name='pomodorosession',
            index=models.Index(fields=['user', 'task', 'start_time', 'end_time'], name='alxfocuszen_user_id_11ff3d_idx'),
        ),
        migrations.AddIndex(
            model_name='pomodorosession',
            index=models.Index(fields=['status'], name='alxfocuszen_status_2c6301_idx'),
        ),
        migrations.AddConstraint(
            model_name='pomodorosession',
            constraint=models.UniqueConstraint(fields=('user', 'task', 'start_time', 'end_time'), name='unique_session_per_task'),
        ),
    ]
